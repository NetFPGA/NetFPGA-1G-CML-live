################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        nf10_bram_output_queues_v2_1_0.mpd
#
#  Library:
#        hw/std/pcores/nf10_bram_output_queues_v1_00_a
#
#  Author:
#        James Hongyi Zeng
#
#  Description:
#        Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN nf10_bram_output_queues

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = Communication High-Speed:MICROBLAZE
OPTION DESC = NetFPGA-10G BRAM Output Queues
OPTION LONG_DESC = NetFPGA-10G BRAM Output Queues

## Bus Interfaces
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = M_AXIS_0, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_1, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_2, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_3, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_4, BUS_STD = AXIS, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_S_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

PORT s_axis_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tstrb = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tuser = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS

PORT m_axis_tdata_0 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tstrb_0 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tuser_0 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tvalid_0 = TVALID, DIR = O, BUS = M_AXIS_0
PORT m_axis_tready_0 = TREADY, DIR = I, BUS = M_AXIS_0
PORT m_axis_tlast_0 = TLAST, DIR = O, BUS = M_AXIS_0

PORT m_axis_tdata_1 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tstrb_1 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tuser_1 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tvalid_1 = TVALID, DIR = O, BUS = M_AXIS_1
PORT m_axis_tready_1 = TREADY, DIR = I, BUS = M_AXIS_1
PORT m_axis_tlast_1 = TLAST, DIR = O, BUS = M_AXIS_1

PORT m_axis_tdata_2 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tstrb_2 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tuser_2 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tvalid_2 = TVALID, DIR = O, BUS = M_AXIS_2
PORT m_axis_tready_2 = TREADY, DIR = I, BUS = M_AXIS_2
PORT m_axis_tlast_2 = TLAST, DIR = O, BUS = M_AXIS_2

PORT m_axis_tdata_3 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tstrb_3 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tuser_3 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tvalid_3 = TVALID, DIR = O, BUS = M_AXIS_3
PORT m_axis_tready_3 = TREADY, DIR = I, BUS = M_AXIS_3
PORT m_axis_tlast_3 = TLAST, DIR = O, BUS = M_AXIS_3

PORT m_axis_tdata_4 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tstrb_4 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tuser_4 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tvalid_4 = TVALID, DIR = O, BUS = M_AXIS_4
PORT m_axis_tready_4 = TREADY, DIR = I, BUS = M_AXIS_4
PORT m_axis_tlast_4 = TLAST, DIR = O, BUS = M_AXIS_4

END
