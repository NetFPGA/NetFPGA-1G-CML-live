################################################################################
#
#  NetFPGA-1G-CML http://www.netfpga.org
#
#  File:
#        nf1_cml_interface_v2_1_0.mpd
#
#  Library:
#        hw/contrib/pcores/nf1_cml_interface_v1_00_a
#
#  Author:
#        Adam Covington
#        Jack Meador
#
#  Description:
#        Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#        Copyright (C) 2013 Computer Measurement Laboratory, LLC
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN nf1_cml_interface

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = MIX
OPTION IP_GROUP = Communication High-Speed:MICROBLAZE
OPTION DESC = NetFPGA-1G-CML Gigabit Ethernet Interface
OPTION LONG_DESC = NetFPGA-1G-CML Gigabit Ethernet Interface

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE 
IO_INTERFACE IO_IF = PHYCTRL 

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = kintex7, DT = string
PARAMETER C_MAC_SEL = 2, DT = integer, range=(0:2), VALUES=(0=TRIMAC_LITE, 1=TRIMAC, 2=UCSD_GIG_MAC)
PARAMETER C_INCLUDE_IDELAYCTRL = 0, DT = integer

PARAMETER C_M_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS

PARAMETER C_DEFAULT_VALUE_ENABLE = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_DEFAULT_SRC_PORT = 0x00, DT=STD_LOGIC_VECTOR, ISVALID = (C_DEFAULT_VALUE_ENABLE == 1)
PARAMETER C_DEFAULT_DST_PORT = 0x00, DT=STD_LOGIC_VECTOR, ISVALID = (C_DEFAULT_VALUE_ENABLE == 1)

PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, BUS = S_AXI, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x02000 
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI

PARAMETER C_TX_VLAN_EN = 0, DT = integer, DESC = "Enable TX VLAN packets by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_FCS_EN = 0, DT = integer, DESC = "Disable automatic padding and checksum generation by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_TX_JUMBO_EN = 0, DT = integer, DESC = "Enable TX jumbo packets by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_TX_FC_EN = 0, DT = integer, DESC = "Enable TX flow control by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_HD_EN = 0, DT = integer, DESC = "Enable TX half duplex by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_IFG_ADJUST_EN = 0, DT = integer, DESC = "Enable interframe gap alternate value by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_MAX_FRAME_EN = 0, DT = integer, DESC = "Enable maximum transmittable frame size specified by TX Max Frame Size register by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_MAX_FRAME_SIZE = 1518, DT = integer, DESC = "Default TX Max Frame Size register value", RANGE = (1518, 65535), ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_PAUSE_MAC_ADDR = 0x0, DT = integer, DESC = "Transmitter pause frame source address", ISVALID = (C_MAC_SEL==0)
PARAMETER C_TX_EN = 1, DT = integer, DESC = "Enable TX by default?", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_TX_RESET = 0, DT = integer, DESC = "Hold TX in reset by default?", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)

PARAMETER C_RX_VLAN_EN = 0, DT = integer, DESC = "Enable RX VLAN packets by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_FCS_EN = 0, DT = integer, DESC = "Pass on the RX frame checksum by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_RX_JUMBO_EN = 0, DT = integer, DESC = "Enable RX jumbo packets by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_RX_FC_EN = 0, DT = integer, DESC = "Enable RX flow control by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_HD_EN = 0, DT = integer, DESC = "Enable RX half duplex by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_PROMISCUOUS_EN = 0, DT = integer, DESC = "Enable RX promiscous mode by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_LEN_TYPE_CHK_DIS = 0, DT = integer, DESC = "Disable length/type error check by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_CONTROL_LEN_CHK_DIS = 0, DT = integer, DESC = "Disable checks on control frame lengths by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_MAX_FRAME_EN = 0, DT = integer, DESC = "Enable maximum receivable frame size specified by the RX Max Frame Size register by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_MAX_FRAME_SIZE = 1518, DT = integer, DESC = "Default RX Max Frame Size register value", RANGE = (1518, 65535), ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_PAUSE_MAC_ADDR = 0x0, DT = integer, DESC = "Receiver pause frame source address", ISVALID = (C_MAC_SEL==0)
PARAMETER C_RX_EN = 1, DT = integer, DESC = "Enable RX by default", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0 || C_MAC_SEL ==2 )
PARAMETER C_RX_RESET = 0, DT = integer, DESC = "Hold RX in reset by default?", VALUES = (1=Yes, 0=No), ISVALID = (C_MAC_SEL==0)

## Ports
PORT glbl_rstn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE
PORT gtx_clk   = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT gtx_clk90 = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT refclk    = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT axi_aclk  = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE

## Streaming AXI Master
PORT m_axis_tdata  = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tstrb  = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tuser  = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT m_axis_tlast  = TLAST, DIR = O, BUS = M_AXIS

## Streaming AXI Slave 
PORT s_axis_tdata  = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tstrb  = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tuser  = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT s_axis_tlast  = TLAST, DIR = I, BUS = S_AXIS

## RGMII PHY 
PORT rgmii_txd    = "", DIR = O, VEC = [3:0]
PORT rgmii_tx_ctl = "", DIR = O
PORT rgmii_txc    = "", DIR = O
PORT rgmii_rxd    = "", DIR = I, VEC = [3:0]
PORT rgmii_rx_ctl = "", DIR = I
PORT rgmii_rxc    = "", DIR = I

## AXI4
PORT s_axi_aclk    = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT s_axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI:S_AXIS:M_AXIS
PORT s_axi_awaddr  = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI,  ISVALID = (C_MAC_SEL==1 || C_MAC_SEL==0)
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI
PORT s_axi_wdata   = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wvalid  = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_wready  = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bresp   = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_bvalid  = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_bready  = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_araddr  = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rdata   = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_rresp   = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_rvalid  = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_rready  = RREADY, DIR = I, BUS = S_AXI

END
