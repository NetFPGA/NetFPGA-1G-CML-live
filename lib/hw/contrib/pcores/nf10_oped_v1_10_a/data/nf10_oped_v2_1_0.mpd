################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        nf10_oped_v2_1_0.mpd
#
#  Library:
#        hw/std/pcores/nf10_oped_v1_10_a
#
#  Author:
#        James Hongyi Zeng
#
#  Description:
#        Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN nf10_oped

## Peripheral Options
OPTION HDL = VERILOG
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
#OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = Bus and Bridge:PCI
OPTION DESC = NetFPGA-10G OpenCPI PCIe endpoint with AXI interfaces
OPTION LONG_DESC = NetFPGA-10G OpenCPI PCIe endpoint with AXI interfaces

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

## Generics for VHDL or Parameters for Verilog
## Only supports 32bit data path for now
PARAMETER C_M_AXIS_DATA_WIDTH = 32, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 32, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, BUS = S_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, BUS = M_AXIS

PARAMETER C_DEFAULT_VALUE_ENABLE = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_DEFAULT_SRC_PORT = 0x00, DT=STD_LOGIC_VECTOR, ISVALID = (C_DEFAULT_VALUE_ENABLE == 1)
PARAMETER C_DEFAULT_DST_PORT = 0x00, DT=STD_LOGIC_VECTOR, ISVALID = (C_DEFAULT_VALUE_ENABLE == 1)

# Required AXI Parameters
#PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI
#PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI, ASSIGNMENT = CONSTANT

PARAMETER C_M_AXI_PROTOCOL = AXI4LITE, BUS = M_AXI, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_THREADS = 0, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_READ = 1, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 1, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 1, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

## Ports
PORT ACLK = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS, ASSIGNMENT = REQUIRE
PORT ARESETN = "", DIR = I, ASSIGNMENT = REQUIRE

PORT ACLK_OPED = "", DIR = O, SIGIS = CLK, BUS = M_AXI

# Master AXI Stream
PORT M_AXIS_DAT_TDATA = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT M_AXIS_DAT_TSTRB = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT M_AXIS_DAT_TVALID = TVALID, DIR = O, BUS = M_AXIS
PORT M_AXIS_DAT_TREADY = TREADY, DIR = I, BUS = M_AXIS
PORT M_AXIS_DAT_TLAST = TLAST, DIR = O, BUS = M_AXIS
PORT M_AXIS_DAT_TUSER = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS

# Slave AXI Stream
PORT S_AXIS_DAT_TDATA = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT S_AXIS_DAT_TSTRB = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT S_AXIS_DAT_TVALID = TVALID, DIR = I, BUS = S_AXIS
PORT S_AXIS_DAT_TREADY = TREADY, DIR = O, BUS = S_AXIS
PORT S_AXIS_DAT_TLAST = TLAST, DIR = I, BUS = S_AXIS
PORT S_AXIS_DAT_TUSER = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS

# Master AXI Light
PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWVALID = AWVALID, DIR = O, BUS = M_AXI
PORT M_AXI_AWREADY = AWREADY, DIR = I, BUS = M_AXI
PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WVALID = WVALID, DIR = O, BUS = M_AXI
PORT M_AXI_WREADY = WREADY, DIR = I, BUS = M_AXI
PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT M_AXI_BVALID = BVALID, DIR = I, BUS = M_AXI
PORT M_AXI_BREADY = BREADY, DIR = O, BUS = M_AXI
PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARVALID = ARVALID, DIR = O, BUS = M_AXI
PORT M_AXI_ARREADY = ARREADY, DIR = I, BUS = M_AXI
PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT M_AXI_RVALID = RVALID, DIR = I, BUS = M_AXI
PORT M_AXI_RREADY = RREADY, DIR = O, BUS = M_AXI

#PCI Ports
PORT PCIE_CLKP = "", DIR = I, SIGIS = CLK
PORT PCIE_CLKN = "", DIR = I, SIGIS = CLK
PORT PCIE_RSTN = "", DIR = I, SIGIS = RST
PORT PCIE_RXP = "", DIR = I, VEC = [7:0]
PORT PCIE_RXN = "", DIR = I, VEC = [7:0]
PORT PCIE_TXP = "", DIR = O, VEC = [7:0]
PORT PCIE_TXN = "", DIR = O, VEC = [7:0]

PORT DEBUG = "", DIR = O, VEC = [31:0]

END
