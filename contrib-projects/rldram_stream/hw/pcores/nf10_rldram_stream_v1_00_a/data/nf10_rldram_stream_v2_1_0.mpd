################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        nf10_rldram_stream_v2_1_0.mpd 
#
#  Library:
#        nf10_rldram_stream_v1_00_a
#
#  Author:
#			Jong Hun Han
#
#  Description:
#        
#
#  Copyright notice:
#        Copyright (C) 2013 University of Cambridge
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN nf10_rldram_stream

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = Verilog
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = NetFPGA-10G nf10_rldram
OPTION DESC = Reference NIC
OPTION LONG_DESC = Reference NIC

## IO Interfaces
IO_INTERFACE IO_IF = memory_0

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## AXILITE Parameters
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x10, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE
PARAMETER RL_MRS_CONF = 0b011, DT = std_logic_vectore(2 down to 0), ASSIGNMENT = REQUIRE

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = "", DIR = I, SIGIS = RST
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

PORT m_axis_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tstrb = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tuser = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS

PORT s_axis_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tstrb = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tuser = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS

#User Ports
PORT RLD2_A_CK_P = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_A_CK_N = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_A_DK_P = "", DIR = O, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_A_DK_N = "", DIR = O, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_A_QK_P = "", DIR = I, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_A_QK_N = "", DIR = I, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_A_A = "", DIR = O, IO_IF = memory_0, VEC = [19:0]
PORT RLD2_A_BA = "", DIR = O, IO_IF = memory_0, VEC = [2:0]
PORT RLD2_A_CS_N = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_A_WE_N = "", IO_IF = memory_0, DIR = O
PORT RLD2_A_REF_N = "", IO_IF = memory_0, DIR = O
PORT RLD2_A_DQ = "", DIR = IO, THREE_STATE = FALSE, IO_IF = memory_0, VEC = [63:0]
PORT RLD2_A_QVLD = "", DIR = I, IO_IF = memory_0, VEC = [1:0]

PORT RLD2_B_CK_P = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_B_CK_N = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_B_DK_P = "", DIR = O, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_B_DK_N = "", DIR = O, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_B_QK_P = "", DIR = I, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_B_QK_N = "", DIR = I, IO_IF = memory_0, VEC = [3:0]
PORT RLD2_B_A = "", DIR = O, IO_IF = memory_0, VEC = [19:0]
PORT RLD2_B_BA = "", DIR = O, IO_IF = memory_0, VEC = [2:0]
PORT RLD2_B_CS_N = "", DIR = O, IO_IF = memory_0, VEC = [1:0]
PORT RLD2_B_WE_N = "", IO_IF = memory_0, DIR = O
PORT RLD2_B_REF_N = "", IO_IF = memory_0, DIR = O
PORT RLD2_B_DQ = "", DIR = IO, THREE_STATE = FALSE, IO_IF = memory_0, VEC = [63:0]
PORT RLD2_B_QVLD = "", DIR = I, IO_IF = memory_0, VEC = [1:0]

PORT init_done = "", DIR = O
PORT clk90 = "", DIR = I, SIGIS = CLK

END
